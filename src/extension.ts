// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as nodepath from 'path';
import { jsonToGo } from './json-to-go/json-to-go';
import { curlToGo } from './curl-to-go/resources/js/curl-to-go';
import { curlToGoStruct } from './curl-to-gostruct/curl-to-gostruct';
/**
 * 
 * @param path 写入的文件路径
 * @param content 写入的文件内容
 * @param fileName 写入的文件名
 * @param fileNameExtra 当文件名存在于该文件夹下时的替代文件名
 */

const writeFile = (path: string, content: string, fileName?: string | undefined, fileNameExtra?: string | undefined) => {
  let newfileName = fileName || 'json_to_go.go';
  const fullPath = `${path}${nodepath.sep}${newfileName}`;
  
  // 如果文件已存在，生成新的文件名
  if (fs.existsSync(fullPath)) {
    const nameWithoutExt = newfileName.replace('.go', '');
    const timestamp = new Date().getTime();
    newfileName = fileNameExtra || `${nameWithoutExt}_${timestamp}.go`;
  }
  
  const finalPath = `${path}${nodepath.sep}${newfileName}`;
  console.log(`写入路径: ${finalPath}`);
  
  try {
    fs.writeFileSync(finalPath, content, 'utf8');
    vscode.window.showInformationMessage(`已生成文件: ${newfileName}`);
  } catch (err) {
    vscode.window.showErrorMessage(`写入${newfileName}失败: ${err}`);
  }
};

// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

  // Use the console to output diagnostic information (console.log) and errors (console.error)
  // This line of code will only be executed once when your extension is activated
  console.log('Congratulations, your extension "json2gostruct" is now active!');

  // The command has been defined in the package.json file
  // Now provide the implementation of the command with registerCommand
  // The commandId parameter must match the command field in package.json
  let disposable = vscode.commands.registerCommand('json2gostruct.helloWorld', () => {
    // The code you place here will be executed every time your command is executed
    // Display a message box to the user
    vscode.window.showInformationMessage('Hello World from json2gostruct!');
  });

  let JsonToGo = vscode.commands.registerCommand('json2gostruct.JsonToGo', (e) => {
    try {
      if (!e || !e.fsPath) {
        vscode.window.showErrorMessage('请选择一个JSON文件');
        return;
      }
      
      const filename = e.fsPath.split('/').pop();
      console.log(`处理文件: ${filename}`);
      
      // 检查文件扩展名
      if (!filename?.toLowerCase().endsWith('.json')) {
        vscode.window.showWarningMessage('建议选择.json文件进行转换');
      }
      
      const data = fs.readFileSync(e.fsPath, 'utf-8');
      console.log('读取的JSON数据:', data);
      
      // 获取结构体名称
      const structName = filename?.replace(/\.[^/.]+$/, '') || 'AutoGenerated';
      const capitalizedStructName = structName.charAt(0).toUpperCase() + structName.slice(1);
      
      const result = jsonToGo(data, capitalizedStructName);
      
      if (result.error) {
        vscode.window.showErrorMessage(`JSON转换失败: ${result.error}`);
        return;
      }
      
      const outputFileName = `${structName}_struct.go`;
      writeFile(nodepath.dirname(e.fsPath), result.go, outputFileName);
      
    } catch (error) {
      vscode.window.showErrorMessage(`处理文件时出错: ${error}`);
      console.error('JsonToGo error:', error);
    }
  });

  let CurlToGo = vscode.commands.registerCommand('json2gostruct.CurlToGo', (e) => {
    try {
      if (!e || !e.fsPath) {
        vscode.window.showErrorMessage('请选择一个包含curl命令的文件');
        return;
      }
      
      const filename = e.fsPath.split('/').pop();
      console.log(`处理文件: ${filename}`);
      
      const data = fs.readFileSync(e.fsPath, 'utf-8');
      console.log('读取的curl命令:', data);
      
      if (!data.trim().toLowerCase().includes('curl')) {
        vscode.window.showWarningMessage('文件中未找到curl命令');
      }
      
      const result = curlToGo(data.trim());
      
      if (!result || result.includes('Error')) {
        vscode.window.showErrorMessage('curl命令转换失败，请检查命令格式');
        return;
      }
      
      const outputFileName = 'curl_to_go.go';
      writeFile(nodepath.dirname(e.fsPath), result, outputFileName);
      
    } catch (error) {
      vscode.window.showErrorMessage(`处理curl命令时出错: ${error}`);
      console.error('CurlToGo error:', error);
    }
  });

  let CurlToGoStructs = vscode.commands.registerCommand('json2gostruct.CurlToGoStructs', (e) => {
    try {
      if (!e || !e.fsPath) {
        vscode.window.showErrorMessage('请选择一个包含curl命令的文件');
        return;
      }
      
      const filename = e.fsPath.split('/').pop();
      console.log(`处理文件: ${filename}`);
      
      const data = fs.readFileSync(e.fsPath, 'utf-8');
      console.log('读取的curl命令:', data);
      
      if (!data.trim().toLowerCase().includes('curl')) {
        vscode.window.showWarningMessage('文件中未找到curl命令');
      }
      
      const result = curlToGoStruct(data.trim());
      
      if (!result || result.includes('Error') || result.includes('No JSON data found')) {
        vscode.window.showErrorMessage('从curl命令中提取JSON数据失败，请确保curl命令包含JSON数据');
        return;
      }
      
      const outputFileName = 'curl_to_struct.go';
      writeFile(nodepath.dirname(e.fsPath), result, outputFileName);
      
    } catch (error) {
      vscode.window.showErrorMessage(`处理curl命令时出错: ${error}`);
      console.error('CurlToGoStructs error:', error);
    }
  });

  context.subscriptions.push(disposable);
  context.subscriptions.push(JsonToGo);
  context.subscriptions.push(CurlToGo);
  context.subscriptions.push(CurlToGoStructs);
}

// This method is called when your extension is deactivated
export function deactivate() {}